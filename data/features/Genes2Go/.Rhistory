uniprot = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/HGNC_to_uniprot_accession.csv",
sep = ";", stringsAsFactors = F)
View(classification)
colnames(uniprot)[1] = "Node"
data_noninfluential = merge(data_noninfluential, uniprot[,c(1:2)], by = "Node")
View(data_noninfluential)
write.table(data_noninfluential$HGNC.Symbol,
file = "M:/PhD/projects/InfluentialNodeProject/David Enrichment analysis/20190103_noninfluential_hgnc_list.txt",
sep = "\t", quote = F, row.names = F, col.names = F)
write.table(data_noninfluential$HGNC.Symbol,
file = "M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/20190103_noninfluential_hgnc_list.txt",
sep = "\t", quote = F, row.names = F, col.names = F)
write.table(data_noninfluential,
file = "M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/20190103_noninfluential_hgnc_list.txt",
sep = "\t", quote = F, row.names = F, col.names = F)
#data noninfluential nodes against all nodes in model
david = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/20190301_David_enrichment_analysis_result_noninfluentialNodes.txt",
sep = "\t", stringsAsFactors = F)
View(data_noninfluential)
View(david)
#remove associations with FDR >5%
david_select = david[david$FDR < 5,]
david_kegg = david_select[david_select$Category == "KEGG_PATHWAY",]
david_GO = david_select[david_select$Category == "GOTERM_BP_DIRECT"  | david_select$Category == "GOTERM_MF_DIRECT",]
fig_function = function(data, header){
#format data
data.1 = subset(data, select = c(Term, Count))
data.1$Class = "Count"
data.2 = subset(data, select = c(Term, Fold.Enrichment))
colnames(data.2) = c("Term", "Count")
data.2$Class = "Fold.Enrichment"
data = rbind(data.1, data.2)
# Create the barplot
p1 = ggplot(data, aes(x=Term, y=Count, fill = Class )) +
geom_bar(stat="identity", color="black", position=position_dodge())+
coord_flip() +
#geom_text(aes(label=round(Count,0)), color="black", size=3.5)+
theme(axis.text=element_text(colour="black"), axis.title=element_blank(),
axis.line = element_line(colour = "black"),
panel.background = element_blank(),
legend.title = element_blank()
) +
scale_fill_brewer(palette="Paired") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 30))
return(p1)
}
p1 = fig_function(david_kegg)
p2 = fig_function(david_GO)
library(gtable)
g2 <- ggplotGrob(p1)
g3 <- ggplotGrob(p2)
g <- rbind(g2, g3, size = "first")
g$widths <- unit.pmax(g2$widths, g3$widths)
grid.newpage()
grid.draw(g)
#####create output file
pdf("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/file.pdf", width = 11, height = 11)
grid.draw(g)
dev.off()
#files for random forest test
setwd("M:/PhD/projects/InfluentialNodeProject/influentialnodes/data/cascade/Features")
#load numeric features + Drug.target
numeric.features = read.csv("20190201_Node_features_new.txt", sep = "\t")
#remove HGNC.symbols
numeric.features = numeric.features[,-c(2)]
#Drug target
drug.target = numeric.features[,c(1,5)]
#remove from numeric.features
numeric.features = numeric.features[,-c(5)]
#load all pathway data
setwd("M:/PhD/projects/InfluentialNodeProject/influentialnodes/data/cascade/Features/Pathway_analysis")
pathway.reactome = read.csv("Reactome_pathways_binary.txt", sep = "\t")
acsn.pathway = read.csv("ACSN_pathways_binary.txt", sep = "\t")
kegg.pathway = read.csv("KEGG_pathways_binary.txt", sep = "\t")
colnames(pathway.reactome)[1] = "Node"
colnames(acsn.pathway)[1] = "Node"
colnames(kegg.pathway)[1] = "Node"
pathway.all = merge(acsn.pathway, kegg.pathway, by = "Node")
pathway.all = merge(pathway.all, pathway.reactome, by = "Node")
binary.all = merge(pathway.all, drug.target, by = "Node")
##COSMIC data
setwd("M:/PhD/projects/InfluentialNodeProject/influentialnodes/data/cascade/Features/COSMIC")
cosmic = read.csv("20190206_COSMIC_node_census.tier_oncogene_tumor.suppressor.txt", sep = "\t")
colnames(cosmic)[1] = "Node"
#Gene2GO
setwd("M:/PhD/projects/InfluentialNodeProject/influentialnodes/data/cascade/Features/Genes2Go")
gene2go = read.csv("20190205_Gene2GO_node_list.txt", sep = "\t")
colnames(gene2go)[1] = "Node"
binary.all = merge(binary.all, cosmic, by = "Node")
binary.all = merge(binary.all, gene2go, by = "Node")
#export files as text file
write.table(numeric.features,
"M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_Numeric_node_features_rf.txt",
sep = "\t", quote = F, row.names = F)
write.table(drug.target,
"M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_drug_target_features_rf.txt",
sep = "\t", quote = F, row.names = F)
write.table(pathway.all,
"M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_pathway_all_features_rf.txt",
sep = "\t", quote = F, row.names = F)
write.table(binary.all,
"M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_binary_all_features_rf.txt",
sep = "\t", quote = F, row.names = F)
View(numeric.features)
cor(numeric.features$Outdegree.activate, numeric.features$Outdegree.inhibit)
cor(numeric.features$Indegree.activate, numeric.features$Indegree.inhibit)
cor(numeric.features$Indegree, numeric.features$Indegree.inhibit)
#load numeric features + Drug.target
numeric.features = read.csv("20190201_Node_features_new.txt", sep = "\t")
#remove HGNC.symbols
numeric.features = numeric.features[,-c(2)]
View(numeric.features)
#Drug target
drug.target = numeric.features[,c(1,3)]
#remove from numeric.features
numeric.features = numeric.features[,-c(3)]
View(drug.target)
#export files as text file
write.table(numeric.features,
"M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_Numeric_node_features_rf.txt",
sep = "\t", quote = F, row.names = F)
write.table(drug.target,
"M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_drug_target_features_rf.txt",
sep = "\t", quote = F, row.names = F)
write.table(pathway.all,
"M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_pathway_all_features_rf.txt",
sep = "\t", quote = F, row.names = F)
write.table(binary.all,
"M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_binary_all_features_rf.txt",
sep = "\t", quote = F, row.names = F)
#files for random forest test
setwd("M:/PhD/projects/InfluentialNodeProject/influentialnodes/data/cascade/Features")
#load numeric features + Drug.target
numeric.features = read.csv("20190201_Node_features_new.txt", sep = "\t")
#remove HGNC.symbols
numeric.features = numeric.features[,-c(2)]
#Drug target
drug.target = numeric.features[,c(1,3)]
View(numeric.features)
View(drug.target)
source('M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/input.data/20190103_data_processing_rf.R')
View(gene2go)
david = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/20190301_David_enrichment_analysis_result_allNodes.txt",
sep = "\t", stringsAsFactors = F)
david_select = david[david$FDR < 5,]
View(david_select)
###only for all nodes #selected relevant terms that are associated with min 15% of HGNC's, i.e. 30 genes
david_select = david[david$Count > 29,]
david_kegg = david_select[david_select$Category == "KEGG_PATHWAY",]
david_GO = david_select[david_select$Category == "GOTERM_BP_DIRECT"  | david_select$Category == "GOTERM_MF_DIRECT",]
fig_function = function(data, header){
#format data
data.1 = subset(data, select = c(Term, Count))
data.1$Class = "Count"
data.2 = subset(data, select = c(Term, Fold.Enrichment))
colnames(data.2) = c("Term", "Count")
data.2$Class = "Fold.Enrichment"
data = rbind(data.1, data.2)
# Create the barplot
p1 = ggplot(data, aes(x=Term, y=Count, fill = Class )) +
geom_bar(stat="identity", color="black", position=position_dodge())+
coord_flip() +
#geom_text(aes(label=round(Count,0)), color="black", size=3.5)+
theme(axis.text=element_text(colour="black"), axis.title=element_blank(),
axis.line = element_line(colour = "black"),
panel.background = element_blank(),
legend.title = element_blank()
) +
scale_fill_brewer(palette="Paired") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 30))
return(p1)
}
p1 = fig_function(david_kegg)
p2 = fig_function(david_GO)
library(gtable)
g2 <- ggplotGrob(p1)
g3 <- ggplotGrob(p2)
g <- rbind(g2, g3, size = "first")
g$widths <- unit.pmax(g2$widths, g3$widths)
grid.newpage()
grid.draw(g)
#####create output file
pdf("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/file.pdf", width = 11, height = 11)
grid.draw(g)
dev.off()
View(david_kegg)
p1
View(david_GO)
data.1 = subset(data_kegg, select = c(Term, Count))
data.1 = subset(david_kegg, select = c(Term, Count))
data.1$Class = "Count"
data.2 = subset(david_kegg, select = c(Term, Fold.Enrichment))
colnames(data.2) = c("Term", "Count")
data.2$Class = "Fold.Enrichment"
data = rbind(data.1, data.2)
fig_function = function(data, header){
#format data
data.1 = subset(data, select = c(Term, Count))
data.1$Class = "Count"
data.2 = subset(data, select = c(Term, Fold.Enrichment))
colnames(data.2) = c("Term", "Count")
data.2$Class = "Fold.Enrichment"
data = rbind(data.1, data.2)
# Create the barplot
p1 = ggplot(data, aes(x=Term, y=Count, fill = Class )) +
geom_bar(stat="identity", color="black", position=position_dodge())+
coord_flip() +
#geom_text(aes(label=round(Count,0)), color="black", size=3.5)+
theme(axis.text=element_text(colour="black"), axis.title=element_blank(),
axis.line = element_line(colour = "black"),
panel.background = element_blank(),
legend.title = element_blank()
) +
scale_fill_brewer(palette="Paired") +
scale_y_continuous(expand = c(0, 0), limits = c(0, Inf))
return(p1)
}
p1 = fig_function(david_kegg)
p2 = fig_function(david_GO)
p1
fig_function = function(data, header){
#format data
data.1 = subset(data, select = c(Term, Count))
data.1$Class = "Count"
data.2 = subset(data, select = c(Term, Fold.Enrichment))
colnames(data.2) = c("Term", "Count")
data.2$Class = "Fold.Enrichment"
data = rbind(data.1, data.2)
# Create the barplot
p1 = ggplot(data, aes(x=Term, y=Count, fill = Class )) +
geom_bar(stat="identity", color="black", position=position_dodge())+
coord_flip() +
#geom_text(aes(label=round(Count,0)), color="black", size=3.5)+
theme(axis.text=element_text(colour="black"), axis.title=element_blank(),
axis.line = element_line(colour = "black"),
panel.background = element_blank(),
legend.title = element_blank()
) +
scale_fill_brewer(palette="Paired") +
#scale_y_continuous(expand = c(0, 0), limits = c(0, Inf))
return(p1)
}
p1 = fig_function(david_kegg)
p2 = fig_function(david_GO)
p1
View(data)
ggplot(data, aes(x=Term, y=Count, fill = Class )) +
geom_bar(stat="identity", color="black", position=position_dodge())+
coord_flip() +
#geom_text(aes(label=round(Count,0)), color="black", size=3.5)+
theme(axis.text=element_text(colour="black"), axis.title=element_blank(),
axis.line = element_line(colour = "black"),
panel.background = element_blank(),
legend.title = element_blank()
) +
scale_fill_brewer(palette="Paired")
fig_function = function(data, header){
#format data
data.1 = subset(data, select = c(Term, Count))
data.1$Class = "Count"
data.2 = subset(data, select = c(Term, Fold.Enrichment))
colnames(data.2) = c("Term", "Count")
data.2$Class = "Fold.Enrichment"
data = rbind(data.1, data.2)
# Create the barplot
p1 = ggplot(data, aes(x=Term, y=Count, fill = Class )) +
geom_bar(stat="identity", color="black", position=position_dodge())+
coord_flip() +
#geom_text(aes(label=round(Count,0)), color="black", size=3.5)+
theme(axis.text=element_text(colour="black"), axis.title=element_blank(),
axis.line = element_line(colour = "black"),
panel.background = element_blank(),
legend.title = element_blank()
) +
scale_fill_brewer(palette="Paired")
#scale_y_continuous(expand = c(0, 0), limits = c(0, Inf))
return(p1)
}
p1 = fig_function(david_kegg)
p2 = fig_function(david_GO)
library(gtable)
g2 <- ggplotGrob(p1)
g3 <- ggplotGrob(p2)
g <- rbind(g2, g3, size = "first")
g$widths <- unit.pmax(g2$widths, g3$widths)
grid.newpage()
grid.draw(g)
#####create output file
pdf("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/file.pdf", width = 11, height = 11)
grid.draw(g)
dev.off()
#####Figures
#data influential nodes against all nodes in model
david = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/David Enrichment analysis/20190222_David_enrichment_analysis_result.txt",
sep = "\t", stringsAsFactors = F)
#####Figures
#data influential nodes against all nodes in model
david = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/20190222_David_enrichment_analysis_result.txt",
sep = "\t", stringsAsFactors = F)
#remove associations with FDR >5%
david_select = david[david$FDR < 5,]
david_kegg = david_select[david_select$Category == "KEGG_PATHWAY",]
david_GO = david_select[david_select$Category == "GOTERM_BP_DIRECT"  | david_select$Category == "GOTERM_MF_DIRECT",]
fig_function = function(data, header){
#format data
data.1 = subset(data, select = c(Term, Count))
data.1$Class = "Count"
data.2 = subset(data, select = c(Term, Fold.Enrichment))
colnames(data.2) = c("Term", "Count")
data.2$Class = "Fold.Enrichment"
data = rbind(data.1, data.2)
# Create the barplot
p1 = ggplot(data, aes(x=Term, y=Count, fill = Class )) +
geom_bar(stat="identity", color="black", position=position_dodge())+
coord_flip() +
#geom_text(aes(label=round(Count,0)), color="black", size=3.5)+
theme(axis.text=element_text(colour="black"), axis.title=element_blank(),
axis.line = element_line(colour = "black"),
panel.background = element_blank(),
legend.title = element_blank()
) +
scale_fill_brewer(palette="Paired")
#scale_y_continuous(expand = c(0, 0), limits = c(0, Inf))
return(p1)
}
p1 = fig_function(david_kegg)
p2 = fig_function(david_GO)
library(gtable)
g2 <- ggplotGrob(p1)
g3 <- ggplotGrob(p2)
g <- rbind(g2, g3, size = "first")
g$widths <- unit.pmax(g2$widths, g3$widths)
grid.newpage()
grid.draw(g)
#####create output file
pdf("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/file.pdf", width = 11, height = 11)
grid.draw(g)
dev.off()
david = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/20190301_David_enrichment_analysis_result_noninfluentialNodes.txt",
sep = "\t", stringsAsFactors = F)
david_select = david[david$FDR < 5,]
View(david_select)
david_kegg = david_select[david_select$Category == "KEGG_PATHWAY",]
david_GO = david_select[david_select$Category == "GOTERM_BP_DIRECT"  | david_select$Category == "GOTERM_MF_DIRECT",]
fig_function = function(data, header){
#format data
data.1 = subset(data, select = c(Term, Count))
data.1$Class = "Count"
data.2 = subset(data, select = c(Term, Fold.Enrichment))
colnames(data.2) = c("Term", "Count")
data.2$Class = "Fold.Enrichment"
data = rbind(data.1, data.2)
# Create the barplot
p1 = ggplot(data, aes(x=Term, y=Count, fill = Class )) +
geom_bar(stat="identity", color="black", position=position_dodge())+
coord_flip() +
#geom_text(aes(label=round(Count,0)), color="black", size=3.5)+
theme(axis.text=element_text(colour="black"), axis.title=element_blank(),
axis.line = element_line(colour = "black"),
panel.background = element_blank(),
legend.title = element_blank()
) +
scale_fill_brewer(palette="Paired")
#scale_y_continuous(expand = c(0, 0), limits = c(0, Inf))
return(p1)
}
p1 = fig_function(david_kegg)
p2 = fig_function(david_GO)
library(gtable)
g2 <- ggplotGrob(p1)
g3 <- ggplotGrob(p2)
g <- rbind(g2, g3, size = "first")
g$widths <- unit.pmax(g2$widths, g3$widths)
grid.newpage()
grid.draw(g)
#####create output file
pdf("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/DavidEnrichmentAnalysis/file.pdf", width = 11, height = 11)
grid.draw(g)
dev.off()
#load file with feature importance
feat.imp = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/importance.tsv",
sep = "\t", header = T, skip = 1)
View(feat.imp)
#load out of bag error for each file
error = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/Default",
sep = "\t", header = T, skip = 1)
View(error)
#first we filter for an error <0.5
error.select = error[error$Error < 0.5,]
View(error.select)
#first we filter for an error <0.5
error.select = error[error$Error < 0.4,]
#first we filter for an error <0.4
select = list(error[error$Error < 0.4,]$X.Run)
View(select)
select[[1]]
names(feat.imp)
names(feat.imp[,-c(1)])
feat.imp.select = feat.imp[ , !(names(feat.imp[,-c(1)]) %in% select[[1]])]
View(feat.imp.select)
feat.imp.select = feat.imp[ , (names(feat.imp[,-c(1)]) %in% select[[1]])]
select[[1]]
class(select[[1]])
class(names(feat.imp))
#first we filter for an error <0.4
select = list(as.character(error[error$Error < 0.4,]$X.Run))
class(select[[1]])
feat.imp.select = feat.imp[ , (names(feat.imp[,-c(1)]) %in% select[[1]])]
View(feat.imp.select)
#first we filter for an error <0.4
select = as.character(error[error$Error < 0.4,]$X.Run)
feat.imp.select = feat.imp[ , (names(feat.imp[,-c(1)]) %in% select)]
select
##analysis of Random forest results
library(tidyr)
select =
feat.imp.select = feat.imp[ , select, drop = F]
#remove space in file name
error = separate(error, X.Run, c("Run", "Run.1"), sep = "")
#load out of bag error for each file
#empty row in Features indicate that all features have been used
error = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/Default",
sep = "\t", header = T, skip = 1, stringsAsFactors = F)
#remove space in file name
error = separate(error, X.Run, c("Run", "Run.1"), sep = "")
#load out of bag error for each file
#empty row in Features indicate that all features have been used
error = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/Default",
sep = "\t", header = T, skip = 1, stringsAsFactors = F)
View(error)
#remove space in file name
error = separate(error, X.Run, c("Run", "Run.1"), sep = " ")
feat.imp = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/importance.tsv",
sep = "\t", header = F, skip = 1)
#load out of bag error for each file
#empty row in Features indicate that all features have been used
error = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/Default",
sep = "\t", header = T, skip = 1)
#first we filter for an error <0.4
select = as.character(error[error$Error < 0.4,]$X.Run)
feat.imp[1,]
feat.imp[1,] %in% select
select
#load file with feature importance
feat.imp = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/importance.tsv",
sep = "\t", header = F, skip = 1, stringsAsFactors = F)
#load out of bag error for each file
#empty row in Features indicate that all features have been used
error = read.csv("M:/PhD/projects/InfluentialNodeProject/influentialnodes/taskNodeAssessment/results/RandomForest/Default",
sep = "\t", header = T, skip = 1, stringsAsFactors = F)
#first we filter for an error <0.4
select = as.character(error[error$Error < 0.4,]$X.Run)
feat.imp[1,] %in% select
feat.imp[ , (feat.imp[1,] %in% select)]
feat.imp.select = feat.imp[ , (feat.imp[1,] %in% select)]
View(feat.imp.select)
feat.imp.select = cbind(feat.imp[,1], feat.imp[ , (feat.imp[1,] %in% select)])
colnames(feat.imp.select) = feat.imp.select[1,]
feat.imp.select = feat.imp.select[-1,]
feat.imp.select[,2:58] = lapply(feat.imp.select[,2:58], as.numeric)
files = c("drug_target_features", "Numeric_node_features", "all files", "KEGG_Reactome_ACSN", "Gene2GO_node", "COSMIC_node")
grepl(file,colnames(feat.imp.select), fixed = TRUE)
grepl(file,as.character(colnames(feat.imp.select)), fixed = TRUE)
file in files
1:length(files)
files[1]
grepl(files[1],as.character(colnames(feat.imp.select)), fixed = TRUE)
select = grepl(files[1],as.character(colnames(feat.imp.select)), fixed = TRUE)
feat.imp.select[ , select, drop = FALSE]
feat.imp.select[select, drop = FALSE]
test =feat.imp.select[select]
View(test)
test = test[complete.cases(test),]
result = list()
for(i in 1:length(files)){
select = grepl(files[i],as.character(colnames(feat.imp.select)), fixed = TRUE)
test = cbind(feat.imp[,i], feat.imp.select[select])
test = test[complete.cases(test),]
result[[i]] = test
}
result[[1]] = test
View(result)
View(test)
select = grepl(files[2],as.character(colnames(feat.imp.select)), fixed = TRUE)
test = cbind(feat.imp[,2], feat.imp.select[select])
test = test[complete.cases(test),]
files[2]
files[3]
select
result = list()
for(i in 1:length(files)){
select = grepl(files[i],as.character(colnames(feat.imp.select)), fixed = TRUE)
test = cbind(feat.imp[,1], feat.imp.select[select])
test = test[complete.cases(test),]
result[[i]] = test
}
test = feat.imp.select[select]
result = list()
for(i in 1:length(files)){
select = grepl(files[i],as.character(colnames(feat.imp.select)), fixed = TRUE)
test = cbind(feat.imp.select[,1], feat.imp.select[select])
test = test[complete.cases(test),]
result[[i]] = test
}
View(result)
View(result)
as.data.frame(result[[1]])
as.data.frame(result[[2]])
test = as.data.frame(result[[2]])
View(test)
View(result)
View(feat.imp.select)
